{
  "Routes": [ //告诉Ocelot如何处理上游的请求
    //{
    //  "DownstreamPathTemplate": "/api/{everything}", //下游的路由模板，即真实处理请求的路径模板
    //  "DownstreamScheme": "http", //请求的方式，如：http,htttps
    //  "DownstreamHostAndPorts": [ //下游的IP以及端口,可以有多个(如果使用负载均衡)，方便实现负载均衡，当然你也可以使用服务发现，实现下游服务的自动注册与发现，这篇文章不会讲解
    //    {
    //      "Host": "localhost",
    //      "Port": 1001
    //    },
    //    {
    //      "Host": "localhost",
    //      "Port": 1002
    //    }
    //  ],
    //  "UpstreamPathTemplate": "/api/{everything}", //上游请求的模板，即用户真实请求的链接
    //  "UpstreamHttpMethod": [ "Get", "Post" ], //上游请求的http方法，是个数组，你可以写多个。
    //  //负载均衡选项（DownstreamHostAndPorts有多个的时候才能看到效果），有三种方式
    //  //LeastConnection : 将请求发往最空闲的那个服务器,
    //  //RoundRobin ：轮流发送,
    //  //NoLoadBalance ：不启用负载均衡，总是发往第一个请求或者服务发现的那个服务器
    //  "LoadBalancerOptions": {
    //    "Type": "RoundRobin"
    //  }
    //}
    {
      "DownstreamPathTemplate": "/api/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 1001
        }
      ],
      "UpstreamPathTemplate": "/api/good/{everything}",
      "UpstreamHttpMethod": [ "Get", "POST" ],
      "LoadBalancerOptions": {
        "Type": "RoundRobin"
      },
      "Key": "Good"
    },
    {
      "DownstreamPathTemplate": "/api/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 1002
        }
      ],
      "UpstreamPathTemplate": "/api/order/{everything}",
      "UpstreamHttpMethod": [ "Get", "POST" ],
      "Key": "Order"
    }
  ],
  "Aggregates": [
    {
      "RouteKeys": [
        "Good",
        "Order"
      ],
      "UpstreamPathTemplate": "/api/GetOrderDetail/{id}",
      "Aggregator": "FakeDefinedAggregator"
    }
  ],
  "ServiceDiscoveryProvider": {
    "Host": "localhost",
    "Port": 9500,
    "ConfigurationKey": "Oceolot_A"
  },
  "GlobalConfiguration": { //顾名思义就是全局配置，此节点的配置允许覆盖ReRoutes里面的配置，你可以在这里进行通用的一些配置信息。

  }
}